#+TITLE: Section 9 - Working with Fragments, Portals, and "Refs"

* JSX Limitations and Workarounds

** One Root Element

- JSX doesn't allow more than one root element
- this makes sense because you cannot return more than one item in regular JavaScript

#+begin_src js
return (
    React.createElement('h2', {}, 'Hi there!');
    React.createElement('p', {}, 'This does not work :(');
)
#+end_src

- you can only have 1 createElement call
- one workaround is wrapping a div or any other non-empty element
- instead of elements, you can also use JavaScript array syntax. Each element inside of the array must be separated by commas
  - but a gotcha of this is that React would want a key
- a drawback of having <div> as a wrapper is that you can have "<div> soup"

#+begin_src html
<div>
    <div>
        <div>
            <div>
                <h1> hi </h1>
            </div>
        </div>
    </div>
</div>
#+end_src

- in larger apps, you can easily end up with tons of unnecessary divs

* Creating a Wrapper Component

- we will create a wrapper component

#+begin_src js
const Wrapper = (props) => {
  return props.children;
};

export default Wrapper;
#+end_src

- this is basically an empty component

* React Fragments

- instead of using a custom wrapper, you can use these:


#+begin_src js
return (
    <React.Fragment>
        <h2>Hi</h2>
        <p>This does not work</p>
    </React.Fragment>
)
#+end_src

#+begin_src js
return (
    <>
        <h2>Hi</h2>
        <p>This does not work</p>
    </>
)
#+end_src

- these are both empty wrapper components. The second option needs to be supported by your project

* Portals
** Introducting React Portals
- portals are like fragments in which they help us write cleaner code

[[./img-for-notes/img1.png]]

- this works, but one thing that is not ideal is the modal is being rendered to the DOM. You have to keep in mind that a modal is the overlay to the entire page, so logically it needs to be higher than everything else
- just because something works, doesn't mean it's good practice
- below will be our goal with using portals

[[./img-for-notes/img2.png]]

** Working with Portals

- in our project, we have an error modal. It's rendered next to the form
- in our index.html, we will add two custom tags

#+begin_src html
<body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="backdrop-root"></div>
    <div id="overlay-root"></div>
    <div id="root"></div>
    ...
#+end_src

- then in our ErrorModal, we will split our components into different parts and import ReactDOM

 #+begin_src js
import React from 'react';
import ReactDOM from 'react-dom';

import Card from './Card';
import Button from './Button';
import classes from './ErrorModal.module.css';

const Backdrop = (props) => {
  return <div className={classes.backdrop} onClick={props.onConfirm} />;
};

const ModalOverlay = (props) => {
  return (
    <Card className={classes.modal}>
      <header className={classes.header}>
        <h2>{props.title}</h2>
      </header>
      <div className={classes.content}>
        <p>{props.message}</p>
      </div>
      <footer className={classes.actions}>
        <Button onClick={props.onConfirm}>Okay</Button>
      </footer>
    </Card>
  );
};

const ErrorModal = (props) => {
  return (
    <React.Fragment>
      {ReactDOM.createPortal(
        <Backdrop onConfirm={props.onConfirm} />,
        document.getElementById('backdrop-root')
      )}
      {ReactDOM.createPortal(
        <ModalOverlay
          title={props.title}
          message={props.message}
          onConfirm={props.onConfirm}
        />,
        document.getElementById('overlay-root')
      )}
    </React.Fragment>
  );
};

export default ErrorModal;
#+end_src

[[./img-for-notes/img3.png]]
