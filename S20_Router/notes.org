#+TITLE: Section 20 - React Router

* Defining and Using Routes

- to install the router, run the following code:

  ~npm i react-router-dom@5~

  This ensures that the version is v5

- let's import the router to ~App~

#+begin_src js
import { Route } from 'react-router-dom';

function App() {
  return (
    <div>
      <h2>Let's get started!</h2>
    </div>
  );
}

export default App;
#+end_src

- now let's add some components. We will add ~Welcome.js~ and ~Products.js~
- then we will use the ~Route~ component to render the pages. This needs a special prop called ~path~, which takes in the value of the URL. Inside of the ~Route~ component would be the component that we will render

#+begin_src js
// App.js
import { Route } from 'react-router-dom';

import Welcome from './components/Welcome';
import Products from './components/Products';

function App() {
  return (
    <div>
      <Route path='/welcome'>
        <Welcome />
      </Route>
      <Route path='/products'>
        <Products />
      </Route>
    </div>
  );
}

export default App;
#+end_src

- to actually make the routes work, we would need to go into ~index.js~ and add a special component called ~BrowserRouter~

#+begin_src js
// index.js
import ReactDOM from 'react-dom';
import { BrowserRouter } from 'react-router-dom';

import './index.css';
import App from './App';

ReactDOM.render(
  <BrowserRouter>
    <App />
  </BrowserRouter>,
  document.getElementById('root')
);
#+end_src

* Working With Links

- Right now we have one issue: we can only change routes through the URL
- let's create a new folder called *views* and put our views in it
- let's create a component called ~MainHeader.js~ and have this, and then we will import this into ~App.js~

#+begin_src js
const MainHeader = () => {
  return (
    <header>
      <nav>
        <ul>
          <li>
            <a href='/welcome'>Welcome</a>
          </li>
          <li>
            <a href='/products'>Products</a>
          </li>
        </ul>
      </nav>
    </header>
  );
};
#+end_src

#+begin_src js
// App.js
import { Route } from 'react-router-dom';

import Welcome from './views/Welcome';
import Products from './views/Products';
import MainHeader from './components/MainHeader';

function App() {
  return (
    <div>
      <MainHeader />
      <Route path='/welcome'>
        <Welcome />
      </Route>
      <Route path='/products'>
        <Products />
      </Route>
    </div>
  );
}

export default App;
#+end_src

- this works fine, but it has one big flaw. Whenever we click on a new page, we see the refresh button turn into a cross. This means that we are sending a request to load a page. We are leaving the SPA because of this
- there is another component that we can import from ~react-router-dom~ called ~Link~. This allows us to create a link. We can replace the anchor tags with the ~Link~ component, and replace ~href~ with ~to~

#+begin_src js
// MainHeader.js
import { Link } from 'react-router-dom';

const MainHeader = () => {
  return (
    <header>
      <nav>
        <ul>
          <li>
            <Link to='/welcome'>Welcome</Link>
          </li>
          <li>
            <Link to='/products'>Products</Link>
          </li>
        </ul>
      </nav>
    </header>
  );
};

export default MainHeader;
#+end_src

* Using Navlinks

- when we have a navbar, we would want to highlight the active link
- in order to do so, react router has a feature that helps us. We can use the ~NavLink~ component. It works like ~Link~ but it also adds a CSS class. We need to specify what link it should be. We do this with the ~activeClassName~ prop

#+begin_src js
// MainHeader.js
import { NavLink } from 'react-router-dom';

import classes from './MainHeader.module.css';

const MainHeader = () => {
  return (
    <header className={classes.header}>
      <nav>
        <ul>
          <li>
            <NavLink activeClassName={classes.active} to='/welcome'>
              Welcome
            </NavLink>
          </li>
          <li>
            <NavLink ctiveClassName={classes.active} to='/products'>
              Products
            </NavLink>
          </li>
        </ul>
      </nav>
    </header>
  );
};

export default MainHeader;
#+end_src

- now in our new CSS file, we need to add the active class

#+begin_src css
.header a:hover,
.header a:active,
.header a.active {
  color: #95bcf0;
  padding-bottom: 0.25rem;
  border-bottom: 4px solid #95bcf0;
}
#+end_src
