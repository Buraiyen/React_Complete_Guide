#+TITLE: Styling React components

* Setting Dynamic Inline Styles

- we have a course goals app. We click add our goals and click a button to append that goal to a list. We want it so that we have validatin styles. In the ~CourseInput.js~ component and inside the form handler function, we can have an if statement that checks if the length of input is zero

#+begin_src js
// CourseInput.js
 const formSubmitHandler = (event) => {
    event.preventDefault();
    if (!enteredValue.trim().length) {
      return;
    }
    props.onAddGoal(enteredValue);
  };
#+end_src

- Even though we added this, we didn't give the user any feedback. We should have some styles. We will add a state for it

#+begin_src js
const [isValid, setIsValid] = useState(true);

return (
    <form onSubmit={formSubmitHandler}>
      <div className='form-control'>
        <label style={{ color: isValid ? 'black' : 'red' }}>Course Goal</label>
        <input
          style={{
            borderColor: isValid ? 'black' : 'red',
            background: isValid ? 'white' : 'salmon',
          }}
          type='text'
          onChange={goalInputChangeHandler}
        />
        </div>
      <Button type='submit'>Add Goal</Button>
    </form>
  );
#+end_src

- having inline styles is not good practice since they take the highest priority in CSS

* Setting CSS Classes Dynamically

 - we will add a new class inside of ~CourseInput.css~ for invalid styles

#+begin_src css
.form-control.invalid input {
  border-color: red;
  background: salmon;
}

.form-control.invalid label {
  color: red;
}
#+end_src

- in our JSX, we will put string-template literals for dynamic classes

#+begin_src js
return (
    <form onSubmit={formSubmitHandler}>
      <div className={`form-control ${!isValid ? 'invalid' : ''}`}>
        <label style={{ color: isValid ? 'black' : 'red' }}>Course Goal</label>
        <input
          style={{
            borderColor: isValid ? 'black' : 'red',
            background: isValid ? 'white' : 'salmon',
          }}
          type='text'
          onChange={goalInputChangeHandler}
        />
      </div>
      <Button type='submit'>Add Goal</Button>
    </form>
  );
#+end_src

* Styled Components

- we are using regular CSS files and importing them to the components, _but this does not result in those files being scoped to that component only_. This is bad when projects scale larger

- approach number 1 is a package called ~Styled Components~

~npm i --save styled-component~

- let's style our button component. We see a strange usage of backticks. Just note that what you pass inside will end up in the ~button~ method, which is the styles. you will get rid of any selectors. For pseudoselectors, use the `&` sign

#+begin_src js
import styled from 'styled-components';

const Button = styled.button`
  font: inherit;
  padding: 0.5rem 1.5rem;
  border: 1px solid #8b005d;
  color: white;
  background: #8b005d;
  box-shadow: 0 0 4px rgba(0, 0, 0, 0.26);
  cursor: pointer;

  &:focus {
    outline: none;
  }

  &:hover,
  &:active {
    background: #ac0e77;
    border-color: #ac0e77;
    box-shadow: 0 0 8px rgba(0, 0, 0, 0.26);
  }
`;

// const Button = props => {
//   return (
//     <button type={props.type} className="button" onClick={props.onClick}>
//       {props.children}
//     </button>
//   );
// };

export default Button;
#+end_src

* Styled Components and Dynamic Props

- we will create a new component in the ~CourseInput.js~ file and import all the styles to it

#+begin_src js
const FormControl = styled.div`
  margin: 0.5rem 0;

  & label {
    font-weight: bold;
    display: block;
    margin-bottom: 0.5rem;
  }

  & input {
    display: block;
    width: 100%;
    border: 1px solid #ccc;
    font: inherit;
    line-height: 1.5rem;
    padding: 0 0.25rem;
  }

  & input:focus {
    outline: none;
    background: #fad0ec;
    border-color: #8b005d;
  }

  &.invalid input {
    border-color: red;
    background: salmon;
  }

  &.invalid label {
    color: red;
  }
`;

return (
    <form onSubmit={formSubmitHandler}>
      <FormControl className={!isValid && 'invalid'}>
        <label>Course Goal</label>
        <input type='text' onChange={goalInputChangeHandler} />
      </FormControl>
      <Button type='submit'>Add Goal</Button>
    </form>
  );
#+end_src

- we can also use props to change styles dynamically

#+begin_src js
return (
    <form onSubmit={formSubmitHandler}>
      <FormControl invalid={!isValid}>
        <label>Course Goal</label>
        <input type='text' onChange={goalInputChangeHandler} />
      </FormControl>
      <Button type='submit'>Add Goal</Button>
    </form>
  );
#+end_src

- back in the styles, we can add JS logic since it's in backticks

#+begin_src js

  & input {
    display: block;
    width: 100%;
    border: 1px solid ${(props) => (props.invalid ? 'red' : '#ccc')};
    font: inherit;
    line-height: 1.5rem;
    padding: 0 0.25rem;
  }
#+end_src

- below is the full styles

#+begin_src js
const FormControl = styled.div`
  margin: 0.5rem 0;

  & label {
    font-weight: bold;
    display: block;
    margin-bottom: 0.5rem;
    color: ${(props) => (props.invalid ? 'red' : 'black')};
  }

  & input {
    display: block;
    width: 100%;
    border: 1px solid ${(props) => (props.invalid ? 'red' : '#ccc')};
    background: ${(props) => (props.invalid ? '#ffd7d7' : 'transparent')};
    font: inherit;
    line-height: 1.5rem;
    padding: 0 0.25rem;
  }

  & input:focus {
    outline: none;
    background: #fad0ec;
    border-color: #8b005d;
  }
`;
#+end_src
