#+TITLE: Section 3: React Basics and Working With Components

* Module Introduction

We will learn how to use everything that makes up React
- React Core Syntax & JSX
- Work with components
- Work with data

* 1. What Are Components? And Why is React All About them?

- React is a JavaScript library for building user interfaces
- HTML/CSS/JS are about building user interfaces as well
- We use libraries like React _to simplify building user interfaces_
  + This is through the use of *components*

- All user interfaces in the end are made up of components

[[../S3_React_Basics_and_Components/img-for-notes/img1.png]]

- in this picture, these components are the same; they are just reused twice
- *components* _are reusable building blocks in your user interface_
  - though you don't have to reuse components
- components are made up of HTML for text, CSS for styling, and possibly JS for logic
- React embraces the concept of components because of
  1. Resusablility - not repeating yourself
  2. Separation of concerns - keeping code base small and manageable. Don't do too many things in one and the same place

* 2. React Code is Written in a "Declarative Way"

** How exactly is a component built?
- in the end, components are built with HTML, CSS, and JS, then we combine the components to build a user interface
- mostly, they're about HTML and JS; CSS could be a factor but it's not too important

** The Declarative Approach
- React allows you to create *reusable and reactive components* consisting of *HTML and JavaScript* (and CSS)
- React is built using the *declarative approach*, which means that you should not tell React that a certain HTML element should be created and inserted in a specific place on the UI
  - instead, you will always define the desired target state(s) and let React figure out the actual JavaScript DOM instructions
- in the end, _we are essentially building our own custom HTML elements_
