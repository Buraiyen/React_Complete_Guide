#+TITLE: Section 3: React Basics and Working With Components
#+AUTHOR: Brian E. Nguyen

* Module Introduction

We will learn how to use everything that makes up React
- React Core Syntax & JSX
- Work with components
- Work with data

* What Are Components? And Why is React All About them?

- React is a JavaScript library for building user interfaces
- HTML/CSS/JS are about building user interfaces as well
- We use libraries like React _to simplify building user interfaces_
  + This is through the use of *components*

- All user interfaces in the end are made up of components

[[../S3_React_Basics_and_Components/img-for-notes/img1.png]]

- in this picture, these components are the same; they are just reused twice
- *components* _are reusable building blocks in your user interface_
  - though you don't have to reuse components
- components are made up of HTML for text, CSS for styling, and possibly JS for logic
- React embraces the concept of components because of
  1. Resusablility - not repeating yourself
  2. Separation of concerns - keeping code base small and manageable. Don't do too many things in one and the same place

* React Code is Written in a "Declarative Way"

** How exactly is a component built?
- in the end, components are built with HTML, CSS, and JS, then we combine the components to build a user interface
- mostly, they're about HTML and JS; CSS could be a factor but it's not too important

** The Declarative Approach
- React allows you to create *reusable and reactive components* consisting of *HTML and JavaScript* (and CSS)
- React is built using the *declarative approach*, which means that you should not tell React that a certain HTML element should be created and inserted in a specific place on the UI
  - instead, you will always define the desired target state(s) and let React figure out the actual JavaScript DOM instructions
- in the end, _we are essentially building our own custom HTML elements_

* Creating a New Project
** Preface
- the easiest way to create a React app is through this GitHub Repo
  - https://github.com/facebook/create-react-app
- this has preconfigured folders with basic React code files
- the ~create-react-app~ tool creates a development environment for our app

- You can also visit this site to view the documentation:
  - https://reactjs.org/

- Make sure you have Node JS installed on your machine

** Creating the Project / Starting the Dev Server
Run these commands in your terminal:

#+begin_src
npx create-react-app react-complete-guide
cd my-app
npm start
#+end_src

After the project is created, ~cd~ into the project and run ~npm start~. The application will automatically load up a preview of our app on ~localhost:3000~

** The Application
You should see something like this in your application:

[[../S3_React_Basics_and_Components/img-for-notes/img2.png]]

These files might change overtime, but just know that you should have a ~src~ folder and a ~package.json~ file. You should also delete all files in the ~src~ folder except for the following:

- App.js
- index.css
- index.js

Inside each of these files, replace their code [[https://github.com/academind/react-complete-guide-code/tree/03-react-basics-working-with-components/code/01-starting-setup/src][with the ones on this repo]]. The reason is that this version is the original one that is created with ~create-react-app~. Just to be sure that the packages are updated, run ~npm i~ in your terminal.

* Analyzing a Standard React Project

Let's have a look at the ~src~ folder because that is where we will spend the majority of our time

[[../S3_React_Basics_and_Components/img-for-notes/img3.png]]

- the most important takeaway: /React code is just JavaScript code/

** ~index.js~
*** General Overview
- let's start with the ~index.js~ file

#+begin_src javascript
import ReactDOM from "react-dom";

import "./index.css";
import App from "./App";

ReactDOM.render(<App />, document.getElementById("root"));
#+end_src

- this file is the first one that is executed whenever the page is loaded
- we will write code that's easy to read and has syntactic sugar, but this kind would actually run in the browser
- the ~npm start~ command will take our code and transform it before it is delivered to the browser
  - an example is ~import "./index.css"~, because that's not actual JavaScript. You can't import CSS into JS
- another example of invalid JS is ~<App />~

*** The React DOM
- in this file, we are importing /ReactDOM/ from ~react-dom~
- also, in the ~package.json~ file, you would see two dependencies: ~react~ and ~react-dom~

[[../S3_React_Basics_and_Components/img-for-notes/img4.png]]

- while technically these are two separate packages, these incompass the React library

*** The ~render~ Method
#+begin_src javascript
ReactDOM.render(<App />, document.getElementById("root"));
#+end_src
- the ~render~ method takes two arguments

**** The App Component

The ~App~ component is the main component that encompasses all other components

#+begin_src javascript
function App() {
  return (
    <div>
      <h2>Let's get started!</h2>
    </div>
  );
}

export default App;
#+end_src

In this, we are returning HTML code inside of a JavaScript file. This is a feature called *JSX*

**** The ~root~ Element DOM API

the default JavaScript DOM API. It calls the ~root~ ID inside of the /public/index.html/ file, which is the actual file that's is used to display our React code

This is what it looks like in the ~index.html~ file
#+begin_src html
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    ...
#+end_src

* Introducing JSX

- JSX stands for /JavaScript XML/
- the ~npm start~ command transforms our React code into browser-friendly code. This is what it looks like in the browser:

[[../S3_React_Basics_and_Components/img-for-notes/img5.png]]

- inside of the ~main.chunk.js~ file, we see a function called ~App~

  #+begin_src javascript
function App() {
  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
    children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("h2", {
      children: "Let's get started!"
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 4,
      columnNumber: 7
    }, this)
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 3,
    columnNumber: 5
  }, this);
}
  #+end_src

- this is the transformed code that runs in the browser

* How React Works

#+begin_src javascript
function App() {
  return (
    <div>
      <h2>Let's get started!</h2>
    </div>
  );
}

export default App;
#+end_src

- we have HTML code inside of ~App()~
- we can build our custom HTML elements with React
- if we make changes to our JSX code while the development server is running, then those changes will automatically update in the browser

* Building a First Custom Component

- it is best practice to put components into their own files, so you have one file per component
- React projects have dozens and hundreds of components in the end, /and that's completely normal/
- inside of the /src/ folder, let's create a /components/ folder to hold our components source files
  + we don't put ~App.js~ inside of it because it's a special type of component
- in the end, we are building a component tree

[[../S3_React_Basics_and_Components/img-for-notes/img6.png]]

1. let's add a new file inside of /components/ folder called ~ExpenseItem.js~
   + it's a React convention to name files starting with a capital character, and every sub-word starts with a captial letter
   + keep in mind that _a React component is just a JavaScript function_
2. lets's write our ~ExpenseItem()~ function in our ~ExpenseItem.js~

#+begin_src javascript
const ExpenseItem = () => {
  return <h2>Expense Item!</h2>;
};

export default ExpenseItem;
#+end_src

3. after we are done with our function, we need to write an export statement
4. we will then import that component in ~App.js~ and use it

#+begin_src javascript
import ExpenseItem from "./components/ExpenseItem";

function App() {
 return (
    <div>
      <h2>Let's get started!</h2>
        <ExpenseItem></ExpenseItem>
    </div>
  );
}
export default App;
#+end_src

[[../S3_React_Basics_and_Components/img-for-notes/img7.png]]

* Writing More Complex JSX Code

- let's tweak the HTML code in the ~ExpenseItem()~ function
- what if we want to add a title, amount, and the date?
- we can only have 1 root element inside of our function
- if we need multiple HTML elements in our function, then we need to surround them inside parentheses

#+begin_src javascript
const ExpenseItem = () => {
	return (
		<div>
			<div>Date</div>
			<div>
				<h2>Title</h2>
				<div>Amount</div>
			</div>
		</div>
	);
};

export default ExpenseItem;
#+end_src

* Adding Basic Styling

- we still use CSS for styling, but there's nothing "React-specific" about it
- to add CSS to a component, we would first need to create a CSS file that has the same name as the component
  + in this case, it would be ~ExpenseItem.css~
- [[https://github.com/academind/react-complete-guide-code/blob/03-react-basics-working-with-components/extra-files/ExpenseItem.css][the code is provided at this link]]
- back in ~ExpenseItem.js~, we will import the CSS

  #+begin_src javascript
// ExpenseItem.js
import "./ExpenseItem.css";

const ExpenseItem = () => {
  return (
      <div>
        <div>Date</div>
      <div>
        <h2>Title</h2>
        <div>Amount</div>
      </div>
    </div>
	);
};

export default ExpenseItem;

#+end_src

- when we work with adding classes to elements, /we don't use/ ~class~, /but rather/ ~className~
- it's strange, but keep in mind that the code inside of our function is not really HTML
  + this is JSX syntax invented by the React team
  + under the hood, it's still JavaScript code
- let's add the classes to the JSX code

#+begin_src javascript
import "./ExpenseItem.css";

const ExpenseItem = () => {
  return (
    <div className='expense-item'>
      <div>March 28th 2021</div>
      <div className='expense-item__description'>
        <h2>Car Insurance</h2>
        <div className='expense-item__price'>$297.48</div>
      </div>
    </div>
  );
};

export default ExpenseItem;
#+end_src

[[../S3_React_Basics_and_Components/img-for-notes/img8.png]]

* Outputting Dynamic Data & Working with Expressions in JSX

- we won't have just one expense, but many, and where the data is not hardcoded
- let's create some temporary variables to output data inside of our ~ExpenseItem.js~

#+begin_src javascript
// ExpenseItem.js
import "./ExpenseItem.css";

const ExpenseItem = () => {
  // Note: months start at 0
  const expenseDate = new Date(2021, 2, 28);
  const expenseTitle = "Car Insurance";
  const expenseAmount = 297.48;
  return (
    <div className='expense-item'>
      <div>March 28th 2021</div>
      <div className='expense-item__description'>
        <h2>Car Insurance</h2>
        <div className='expense-item__price'>$297.48</div>
      </div>
    </div>
  );
};

export default ExpenseItem;
#+end_src

- you can replace hardcoded data with open and closing curly braces
- inside of the curly braces you can run basic JavaScript expressions, like ~1+1~
- let's insert our variables into the curly brackets

#+begin_src javascript
import "./ExpenseItem.css";

const ExpenseItem = () => {
  // Note: months start at 0
  // Date object is not a string
  const expenseDate = new Date(2021, 2, 28);
  const expenseTitle = "Car Insurance";
  const expenseAmount = 297.48;
  return (
    <div className='expense-item'>
      <div>{expenseDate.toISOString()}</div>
      <div className='expense-item__description'>
        <h2>{expenseTitle}</h2>
        <div className='expense-item__price'>${expenseAmount}</div>
      </div>
    </div>
  );
};

export default ExpenseItem;
#+end_src

[[../S3_React_Basics_and_Components/img-for-notes/img9.png]]


* Passing Data via "Props"

- how can we make the ~ExpenseItem~ component reusable?
  + in ~App.js~ we can just copy the component multiple times, but they all output the same data
- let's create data outside of our ~ExpenseItem~ component
  + [[https://github.com/academind/react-complete-guide-code/blob/03-react-basics-working-with-components/extra-files/expenses.txt][insert this data inside of your ~App.js~ component]]i

#+begin_src javascript
// App.js
import ExpenseItem from "./components/ExpenseItem";

function App() {
  const expenses = [
    {
      id: "e1",
      title: "Toilet Paper",
      amount: 94.12,
      date: new Date(2020, 7, 14),
    },
    { id: "e2", title: "New TV", amount: 799.49, date: new Date(2021, 2, 12) },
    {
      id: "e3",
      title: "Car Insurance",
      amount: 294.67,
      date: new Date(2021, 2, 28),
    },
    {
      id: "e4",
      title: "New Desk (Wooden)",
      amount: 450,
      date: new Date(2021, 5, 12),
    },
  ];
  return (
    <div>
      <h2>Let's get started!</h2>
      <ExpenseItem></ExpenseItem>
      <ExpenseItem></ExpenseItem>
      <ExpenseItem></ExpenseItem>
    </div>
  );
}

export default App;
#+end_src

- we can pass in custom attributes in our components
- we can also pass in more than 1 attribute to a component

#+begin_src javascript
import ExpenseItem from "./components/ExpenseItem";

function App() {
  const expenses = [
    {
      id: "e1",
      title: "Toilet Paper",
      amount: 94.12,
      date: new Date(2020, 7, 14),
    },
    { id: "e2", title: "New TV", amount: 799.49, date: new Date(2021, 2, 12) },
    {
      id: "e3",
      title: "Car Insurance",
      amount: 294.67,
      date: new Date(2021, 2, 28),
    },
    {
      id: "e4",
      title: "New Desk (Wooden)",
      amount: 450,
      date: new Date(2021, 5, 12),
    },
  ];
  return (
    <div>
      <h2>Let's get started!</h2>
      <ExpenseItem
        title={expenses[0].title}
        amount={expenses[0].amount}
        date={expenses[0].date}
      ></ExpenseItem>
      <ExpenseItem
        title={expenses[1].title}
        amount={expenses[1].amount}
        date={expenses[1].date}
      ></ExpenseItem>
      <ExpenseItem
        title={expenses[2].title}
        amount={expenses[2].amount}
        date={expenses[2].date}
      ></ExpenseItem>
      <ExpenseItem
        title={expenses[3].title}
        amount={expenses[3].amount}
        date={expenses[3].date}
      ></ExpenseItem>
    </div>
  );
}

export default App;

#+end_src

- now we need to output the data inside ~ExpenseItem.js~ because it's still showing the hardcoded data
- we would need to pass in the data as a parameter in the function
- you would think the function would look like this:

#+begin_src javascript
const ExpenseItem = (title, amount, date) => {
...
}
#+end_src

- but in reality, we don't do this. We only pass in one parameter, and you can name this whatever you want. Typically, it would be named ~props~ to make it clear that this is the object that holds our data
  + the keys are the names of the attributes that we pass in, and the values use the values' names
#+begin_src javascript
// ExpenseItem.js
import "./ExpenseItem.css";

const ExpenseItem = (props) => {
  return (
    <div className='expense-item'>
      <div>{props.date.toISOString()}</div>
      <div className='expense-item__description'>
        <h2>{props.title}</h2>
        <div className='expense-item__price'>${props.amount}</div>
      </div>
    </div>
  );
};

export default ExpenseItem;
#+end_src

[[../S3_React_Basics_and_Components/img-for-notes/img10.png]]

* Adding "normal" JavaScript Logic to Components

- we will fix the JSX code so that the app is more human-readable
- we have our date object. If we just want to output specific parts of the date, then we can use the ~.toLocaleString()~, which helps with outputting the date in readable format
  + this methods takes in 2 parameters
    1. location
    2. the format of the date

#+begin_src javascript
import "./ExpenseItem.css";

const ExpenseItem = (props) => {
  const month = props.date.toLocaleString("en-US", { month: "long" });
  const day = props.date.toLocaleString("en-US", { day: "2-digit" });
  const year = props.date.getFullYear();

  return (
    <div className='expense-item'>
      <div>
        <div>{month}</div>
        <div>{day}</div>
        <div>{year}</div>
      </div>
      <div className='expense-item__description'>
        <h2>{props.title}</h2>
        <div className='expense-item__price'>${props.amount}</div>
      </div>
    </div>
  );
};

export default ExpenseItem;
#+end_src

- /tip:/ it's good practice to do data extraction before you place them inside the JSX code

* Splitting Components into Multiple Components

- as you work on your React components, the components will become bigger and bigger, which is natural
- React allows you to split your application into smaller building blocks with components
- we can treat the date display JSX as its own separate component; there is no hard rule to determine what can be a component and what couldn't
- let's create a new component called ~ExpenseDate.js~ and take the date stuff and put it into this new component

#+begin_src javascript
// ExpenseDate.js
const ExpenseDate = (props) => {
  const month = props.date.toLocaleString("en-US", { month: "long" });
  const day = props.date.toLocaleString("en-US", { day: "2-digit" });
  const year = props.date.getFullYear();

  return (
    <div>
      <div>{month}</div>
      <div>{day}</div>
      <div>{year}</div>
    </div>
  );
};

export default ExpenseDate;
#+end_src

- when we use our custom components, if there is no content between the opening and closing tags, then we can write our components in this format:

#+begin_src html
<ExpenseDate />
#+end_src

- now we need to pass in props for our ~ExpenseDate~ component

#+begin_src javascript
import ExpenseDate from "./ExpenseDate";
import "./ExpenseItem.css";

const ExpenseItem = (props) => {
  return (
    <div className='expense-item'>
      <ExpenseDate date={props.date}/>
      <div className='expense-item__description'>
        <h2>{props.title}</h2>
        <div className='expense-item__price'>${props.amount}</div>
      </div>
    </div>
  );
};

export default ExpenseItem;
#+end_src

- let's add some styling with an ExpenseDate.css file [[https://github.com/academind/react-complete-guide-code/blob/03-react-basics-working-with-components/extra-files/ExpenseDate.css][using the code from this link]]
