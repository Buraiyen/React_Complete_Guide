#+TITLE: Section 3: React Basics and Working With Components
#+AUTHOR: Brian E. Nguyen

* Module Introduction

We will learn how to use everything that makes up React
- React Core Syntax & JSX
- Work with components
- Work with data

* 1. What Are Components? And Why is React All About them?

- React is a JavaScript library for building user interfaces
- HTML/CSS/JS are about building user interfaces as well
- We use libraries like React _to simplify building user interfaces_
  + This is through the use of *components*

- All user interfaces in the end are made up of components

[[../S3_React_Basics_and_Components/img-for-notes/img1.png]]

- in this picture, these components are the same; they are just reused twice
- *components* _are reusable building blocks in your user interface_
  - though you don't have to reuse components
- components are made up of HTML for text, CSS for styling, and possibly JS for logic
- React embraces the concept of components because of
  1. Resusablility - not repeating yourself
  2. Separation of concerns - keeping code base small and manageable. Don't do too many things in one and the same place

* 2. React Code is Written in a "Declarative Way"

** How exactly is a component built?
- in the end, components are built with HTML, CSS, and JS, then we combine the components to build a user interface
- mostly, they're about HTML and JS; CSS could be a factor but it's not too important

** The Declarative Approach
- React allows you to create *reusable and reactive components* consisting of *HTML and JavaScript* (and CSS)
- React is built using the *declarative approach*, which means that you should not tell React that a certain HTML element should be created and inserted in a specific place on the UI
  - instead, you will always define the desired target state(s) and let React figure out the actual JavaScript DOM instructions
- in the end, _we are essentially building our own custom HTML elements_

* 3. Creating a New Project
** Preface
- the easiest way to create a React app is through this GitHub Repo
  - https://github.com/facebook/create-react-app
- this has preconfigured folders with basic React code files
- the ~create-react-app~ tool creates a development environment for our app

- You can also visit this site to view the documentation:
  - https://reactjs.org/

- Make sure you have Node JS installed on your machine

** Creating the Project / Starting the Dev Server
Run these commands in your terminal:

#+begin_src
npx create-react-app react-complete-guide
cd my-app
npm start
#+end_src

After the project is created, ~cd~ into the project and run ~npm start~. The application will automatically load up a preview of our app on ~localhost:3000~

** The Application
You should see something like this in your application:

[[../S3_React_Basics_and_Components/img-for-notes/img2.png]]

These files might change overtime, but just know that you should have a ~src~ folder and a ~package.json~ file. You should also delete all files in the ~src~ folder except for the following:

- App.js
- index.css
- index.js

Inside each of these files, replace their code [[https://github.com/academind/react-complete-guide-code/tree/03-react-basics-working-with-components/code/01-starting-setup/src][with the ones on this repo]]. The reason is that this version is the original one that is created with ~create-react-app~. Just to be sure that the packages are updated, run ~npm i~ in your terminal.

* 3. Analyzing a Standard React Project

Let's have a look at the ~src~ folder because that is where we will spend the majority of our time

[[../S3_React_Basics_and_Components/img-for-notes/img3.png]]

- the most important takeaway: /React code is just JavaScript code/

** ~index.js~
- let's start with the ~index.js~ file

#+begin_src javascript
import ReactDOM from "react-dom";

import "./index.css";
import App from "./App";

ReactDOM.render(<App />, document.getElementById("root"));
#+end_src

- this file is the first one that is executed whenever the page is loaded
- we will write code that's easy to read and has syntactic sugar, but this kind would actually run in the browser
- the ~npm start~ command will take our code and transform it before it is delivered to the browser
  - an example is ~import "./index.css"~, because that's not actual JavaScript. You can't import CSS into JS

- another example of invalid JS is ~<App />~

** The React DOM
- in this file, we are importing /ReactDOM/ from ~react-dom~
- also, in the ~package.json~ file, you would see two dependencies: ~react~ and ~react-dom~

[[../S3_React_Basics_and_Components/img-for-notes/img4.png]]
