#+TITLE: Section 5: Rendering Lists & Conditional Content
#+AUTHOR: Brian E. Nguyen

* Module Introduction

In this section, we will look at the following:
- outputting arrays of data
- show different content based on different conditions

* Rendering Lists of Data

- in our app, our list is static
- if we try to change the filter or add an item, nothing happens
- we will use a loop to dynamically render these components. *Note:* I've already done this, but I will compare what I did to their's

_My solution_

#+begin_src js
{props.expenses.map(function (obj, i) {
          return (
            <ExpenseItem
              title={props.expenses[i].title}
              amount={props.expenses[i].amount}
              date={props.expenses[i].date}
            />
          );
        })}
#+end_src

_Their solution_

#+begin_src js
{props.expenses.map((expense) => (
          <ExpenseItem
            title={expense.title}
            amount={expense.amount}
            date={expense.date}
          />
        ))}
#+end_src

* Using Stateful Lists

- how could we update the list when we add a new item?
- remember that when we update a variable, React won't automatically update the component.
  + we need to figure out how to update the ~expenses~ array in the ~App~ component
1. we will achieve this by using state. Inside of ~App~, import the ~useState()~ function
2. extract the ~expenses~ array outside of the component function and give it a global variable name called ~INITIAL_EXPENSES~
3. Inside of the component function, we call ~useState()~ and pass in the array

#+begin_src js
const [expenses, setExpenses] = useState(INITIAL_EXPENSES);
#+end_src

4. Inside of our ~addExpenseHandler()~ we will call the ~setExpenses()~ function to set our expenses array to a new one

#+begin_src js
const addExpenseHandler = (expense) => {
  setExpenses([expense, ...expenses]);
};
#+end_src

If you update the state like this, however, this is not correct because you are depending on the last state. Instead, you should use a special function that automatically retrieves the older snapshot of the previous state

#+begin_src js
const addExpenseHandler = (expense) => {
    setExpenses((prevExpenses) => {
      return [...prevExpenses, expense];
    });
  };
#+end_src

*NOTE*: there seems to be a bug where ~[expense, ...prevExpense]~ doesn't update the title. A workaround for this is inside of ~ExpenseItem~, change ~title~ to ~props.title~

[[./img-for-notes/img1.png]]

* Understanding Keys

[[./img-for-notes/img1.png]]

- why are we getting this key warning? Afterall, everything works out
- React has a special featue so that it updates lists efficiently and without bugs
- if we were to look at the ~<div>~ tags when adding a new item, the tags flash
- what's happening is that when we add a new item, React renders the item as the last item for the list of ~<div>~, and takes all ~<div>~'s and replaces their contents
- the final result of this is correct, *but performance-wise, this is not great*, and it could also lead to bugs

** Reasoning Behind this

- why does React act like this? Because it has no other way. It checks the length of the array and looks at the number of items that were already rendered, so it can't know where it should at the item
- to fix this, we would need to go to ~Expennses.js~ and add a special prop to the list rendering section, which is the ~key~ prop. You can add this to any component in React

#+begin_src js
props.items.map((expense) => (
          <ExpenseItem
            key={expense.id}
            title={expense.title}
            amount={expense.amount}
            date={expense.date}
          />
        ))}
#+end_src

- if you had no unique ID in your array, then you could use the ~index~ value of the ~map~ function, though it's discouraged

#+begin_src js
props.items.map((expense, index) => (
          <ExpenseItem
            key={index}
            title={expense.title}
            amount={expense.amount}
            date={expense.date}
          />
        ))}
#+end_src

* Assignment 3 - Working with Lists

Todo: make the filter actually work

#+begin_src js
import { useState } from 'react';

import ExpenseItem from './ExpenseItem';
import ExpensesFilter from './ExpensesFilter';
import Card from '../UI/Card';
import './Expenses.css';

const Expenses = (props) => {
  const [filteredYear, setFilteredYear] = useState('2020');
  const filterChangeHandler = (selectedYear) => {
    setFilteredYear(selectedYear);
  };
// RIGHT OVER HERE
  const filteredExpenses = props.items.filter((expense) => {
    return expense.date.getFullYear().toString() === filteredYear;
  });

  return (
    <div>
      <Card className='expenses'>
        <ExpensesFilter
          selected={filteredYear}
          onChangeFilter={filterChangeHandler}
        />
        // AND RIGHT HERE
        {filteredExpenses.map((expense) => (
          <ExpenseItem
            key={expense.id}
            title={expense.title}
            amount={expense.amount}
            date={expense.date}
          />
        ))}
        {/* {props.expenses.map(function (obj, i) {
          return (
            <ExpenseItem
              title={props.expenses[i].title}
              amount={props.expenses[i].amount}
              date={props.expenses[i].date}
            />
          );
        })} */}
      </Card>
    </div>
  );
};
export default Expenses;
#end_src

* Outputting Conditional Content

- there are situations where we have no data for a certain year. In such case, we would want to show a message saying that there isn't any expenses for that year
- to do that, we would need to write a dynamic expression with in our JSX code. Things like 'if' or 'for' are not allowed, so we need to user ternary expressions

#+begin_src js
{filteredExpenses.length === 0 ? (
          <p>No expenses found!</p>
        ) : (
          filteredExpenses.map((expense) => (
            <ExpenseItem
              key={expense.id}
              title={expense.title}
              amount={expense.amount}
              date={expense.date}
            />
          ))
        )}
#+end_src js

[[./img-for-notes/img3.png]]

- long ternary expressions like this are a bit hard to read. Let's make another conditions

#+begin_src js
{filteredExpenses.length === 0 && <p>No expenses found!</p>}
{filteredExpenses.length > 0 &&
    filteredExpenses.map((expense) => (
      <ExpenseItem
        key={expense.id}
        title={expense.title}
        amount={expense.amount}
        date={expense.date}
      />
    ))}
#+end_src

- How JS code works is that the && returns the value after it
- even after we done this way, this might still be too much code.
- we can also store JSX content inside variables



#+begin_src js
  let expensesContent = <p>No expenses found!</p>;
  if (filteredExpenses.length > 0) {
    expensesContent = filteredExpenses.map((expense) => (
      <ExpenseItem
        key={expense.id}
        title={expense.title}
        amount={expense.amount}
        date={expense.date}
      />
    ));
  }

  return (
    <div>
      <Card className='expenses'>
        <ExpensesFilter
          selected={filteredYear}
          onChangeFilter={filterChangeHandler}
        />
        {expensesContent}
#+end_src

* Adding Conditional Return Statements

- before we continue, let's extract the list logic into a new component, to make the Expenses component leaner. Let's create a new component called ~ExpensesList.js~

#+begin_src js
import ExpenseItem from './ExpenseItem';

const ExpensesList = (props) => {
  let expensesContent = <p>No expenses found!</p>;
  if (props.items.length > 0) {
    expensesContent = props.items.map((expense) => (
      <ExpenseItem
        key={expense.id}
        title={expense.title}
        amount={expense.amount}
        date={expense.date}
      />
    ));
  }
};

export default ExpensesList
#+end_src

- And now we will import this into ~Expenses~ and pass in our ~filteredExpenses~ list

#+begin_src js
import { useState } from 'react';

import ExpensesFilter from './ExpensesFilter';
import Card from '../UI/Card';
import './Expenses.css';
import ExpensesList from './ExpensesList';

const Expenses = (props) => {
  const [filteredYear, setFilteredYear] = useState('2020');
  const filterChangeHandler = (selectedYear) => {
    setFilteredYear(selectedYear);
  };

  const filteredExpenses = props.items.filter((expense) => {
    return expense.date.getFullYear().toString() === filteredYear;
  });

  return (
    <div>
      <Card className='expenses'>
        <ExpensesFilter
          selected={filteredYear}
          onChangeFilter={filterChangeHandler}
        />
        <ExpensesList items={filteredExpenses} />
#+end_src

- back inside of our ~ExpensesList~, we will return an unordered list and rework the logic a little bit

#+begin_src js
import ExpenseItem from './ExpenseItem';
import './ExpensesList.css';

const ExpensesList = (props) => {
  if (props.items.length === 0) {
    return <h2 className='expenses-list__fallback'>Found no expenses</h2>;
  }

  return (
    <ul className='expenses-list'>
      {props.items.map((expense) => (
        <ExpenseItem
          key={expense.id}
          title={expense.title}
          amount={expense.amount}
          date={expense.date}
        />
      ))}
    </ul>
  );
};

export default ExpensesList;
#+end_src
